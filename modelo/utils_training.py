# -*- coding: utf-8 -*-
"""utils/training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tLvg1mez-DOW7NzbIS1rmIpM7AkMKs-1
"""

import os, csv, torch
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix

def plot_confusion_matrix(y_true, y_pred, epoch, save_path=None):
    cm = confusion_matrix(y_true, y_pred)
    plt.figure(figsize=(4, 3))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False,
                xticklabels=["Normal", "Anomaly"], yticklabels=["Normal", "Anomaly"])
    plt.xlabel("Predicted")
    plt.ylabel("True")
    plt.title(f"Confusion Matrix - Epoch {epoch}")
    plt.tight_layout()
    if save_path:
        plt.savefig(save_path, dpi=150)
    plt.show()

def train_with_validation(model, train_loader, val_loader, save_path="best_model.pt",
                          log_path="train_log.csv", epochs=20, lr=1e-4, patience=50):
    optimizer = torch.optim.Adam(model.parameters(), lr=lr)
    criterion = torch.nn.BCELoss()
    best_val_loss = float("inf")
    patience_counter = 0
    if not os.path.exists(log_path):
        with open(log_path, "w", newline="") as f:
            csv.writer(f).writerow(["epoch", "train_loss", "val_loss", "accuracy", "precision", "recall", "f1", "auc"])
    for epoch in range(epochs):
        model.train()
        train_loss = sum(criterion(model(x, fsg, trg), y).item() for x, fsg, trg, y in train_loader)
        model.eval()
        val_loss, all_preds, all_labels = 0, [], []
        with torch.no_grad():
            for x, fsg, trg, y in val_loader:
                preds = model(x, fsg, trg)
                val_loss += criterion(preds, y).item()
                all_preds.extend(preds.cpu().numpy())
                all_labels.extend(y.cpu().numpy())
        preds_bin = [1 if p >= 0.5 else 0 for p in all_preds]
        acc = accuracy_score(all_labels, preds_bin)
        prec = precision_score(all_labels, preds_bin, zero_division=0)
        rec = recall_score(all_labels, preds_bin, zero_division=0)
        f1 = f1_score(all_labels, preds_bin, zero_division=0)
        auc = roc_auc_score(all_labels, all_preds)
        print(f"Epoch {epoch+1} | Train Loss: {train_loss:.4f} | Val Loss: {val_loss:.4f} | Acc: {acc:.2f} | Prec: {prec:.2f} | Rec: {rec:.2f} | F1: {f1:.2f} | AUC: {auc:.2f}")
        plot_confusion_matrix(all_labels, preds_bin, epoch+1)
        with open(log_path, "a", newline="") as f:
            csv.writer(f).writerow([epoch+1, train_loss, val_loss, acc, prec, rec, f1, auc])
        if val_loss < best_val_loss:
            patience_counter = 0
            best_val_loss = val_loss
            torch.save(model.state_dict(), save_path)
            print("Modelo mejor guardado")
        else:
            patience_counter += 1
            if patience_counter > patience:
                print(f"Entrenamiento detenido por early stopping.")
                break