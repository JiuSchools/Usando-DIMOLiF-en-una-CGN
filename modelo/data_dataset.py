# -*- coding: utf-8 -*-
"""data/dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E9L4rZ4TkDBHqZpMFio84RchiUr2Zs3E
"""

import os
import json
import torch
import numpy as np
from glob import glob
from torch.utils.data import Dataset
from utils.graph_builders import build_FSG, build_TRG

class VideoFeatureDataset(Dataset):
    def __init__(self, npy_dir, labels_json, k_fsg=8, d_trg=2, fixed_len=32):
        with open(labels_json, 'r') as f:
            self.labels = json.load(f)
        self.files = [
            file for file in sorted(glob(os.path.join(npy_dir, "*.npy")))
            if os.path.splitext(os.path.basename(file))[0] in self.labels
        ]
        self.k = k_fsg
        self.d = d_trg
        self.fixed_len = fixed_len

    def __len__(self):
        return len(self.files)

    def __getitem__(self, idx):
        file = self.files[idx]
        name = os.path.splitext(os.path.basename(file))[0]
        x = np.load(file).astype(np.float32)
        y = self.labels[name]
        if x.shape[0] > self.fixed_len:
            x = x[:self.fixed_len]
        elif x.shape[0] < self.fixed_len:
            pad = np.zeros((self.fixed_len - x.shape[0], x.shape[1]), dtype=np.float32)
            x = np.vstack([x, pad])
        x = torch.tensor(x)
        y = torch.tensor(y, dtype=torch.float32)
        adj_fsg = build_FSG(x, k=self.k)
        adj_trg = build_TRG(self.fixed_len, d=self.d)
        return x, adj_fsg, adj_trg, y