# -*- coding: utf-8 -*-
"""models/anomaly_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-x2IlIknoG5BsXednNcqmryE3JE6A-49
"""

import torch
from torch import nn
import geoopt
from .hyperbolic_layers import MobiusLinear

class HyperbolicGraphConvolution(nn.Module):
    def __init__(self, in_dim, out_dim, c=1.0):
        super().__init__()
        self.ball = geoopt.PoincareBall(c)
        self.linear = MobiusLinear(in_dim, out_dim, ball=self.ball, nonlin=torch.nn.Tanh())
        self.manifold = self.ball

    def forward(self, x, adj):
        x_h = self.manifold.expmap0(x)
        x_h = self.manifold.projx(x_h)
        deg = adj.sum(1).clamp(min=1).unsqueeze(1)
        agg = torch.matmul(adj, x_h) / deg
        agg = self.manifold.projx(agg)
        out = self.linear(agg)
        return self.manifold.projx(out)

class HyperbolicVideoAnomalyModel(nn.Module):
    def __init__(self, T=32, D=158, hidden_dim=64, K=5, c=1.0):
        super().__init__()
        self.T, self.D, self.K = T, D, K
        self.ball = geoopt.PoincareBall(c)
        self.hgcn_fsg = HyperbolicGraphConvolution(D, hidden_dim, c=c)
        self.hgcn_trg = HyperbolicGraphConvolution(D, hidden_dim, c=c)
        self.classifier = nn.Sequential(
            nn.Linear(hidden_dim * K, 64),
            nn.ReLU(),
            nn.Linear(64, 1),
            nn.Sigmoid()
        )

    def forward(self, x, adj_fsg, adj_trg):
        B = x.size(0)
        outputs = []
        for i in range(B):
            x_i, fsg_i, trg_i = x[i], adj_fsg[i], adj_trg[i]
            h1 = self.hgcn_fsg(x_i, fsg_i)
            h2 = self.hgcn_trg(x_i, trg_i)
            h = (h1 + h2) / 2
            h = self.ball.logmap0(h)
            norms = torch.norm(h, dim=1)
            topk = torch.topk(norms, self.K).indices
            top_feat = h[topk]
            vec = top_feat.reshape(-1)
            out = self.classifier(vec)
            outputs.append(out)
        return torch.stack(outputs).squeeze(1)